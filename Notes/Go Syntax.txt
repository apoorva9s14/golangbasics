#############################################
Variable declaration:
var i int = 0
i := 0

var i int
i = 0


#############################################
For Loop:
for i := 0; i < 10; i++ {
}

#############################################
While loop:
for sum < 1000 {
}

#############################################
If block:
if x < 0 {
}
if v := math.Pow(x, n); v < lim {
		return v
	}
v is limited to the if block or if else block

#############################################
Switch statement:
switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
		fallthr]
	case "fallthroughos":
		fmt.Println("fallthrough OS.")
	default:
		fmt.Printf("%s.\n", os)
	}

If a "case" block ends with fallthrough, the next block will always get executed irrespective of the 
condition success or failure. 
#############################################
Pointer:
addr_of_var := &var         // point to i
*addr_of_var == var         // pointer of address gives the variable


fmt.Println(*p) // read i through the pointer
*p = 21         // set i through the pointer
fmt.Println(i)  // see the new value of i

#############################################
Type conversion:
byte(variable_name)
int(variable_name)
reflect.TypeOf(variable_name) to know the type of variable

#############################################
Make:
a := make([]int, 5)  // len(a)=5
b := make([]int, 0, 5) // len(b)=0, cap(b)=5


#############################################
Map:
var m1 map[int]int
m1 = make(map[int]int)
map[type_of_key]type_of_value_of_key
m[key] = elem
delete(m, key)
elem, ok := m[key]    // if elem not present, ok is false, elem is 0
                      // ok can be omitted altogether, to get just the value
					  // ok helps distinguish between actual '0' value or if it is the 
					  // value for element not found.

#############################################
Slices and Arrays:

Slice:
s := make([]byte, 5, 5)
len(s) == 5
cap(s) == 5
If capacity is omitted, it is equal to length.
Array:
b := [2]string{"Penn", "Teller"}
b := [...]string{"Penn", "Teller"}
var b [2]string

Extend a slice:
n := len(slice)
slice = slice[0 : n+1]
slice[n] = element

#############################################
Methods:
Method is a function with receiver argument
func (v Vertex) Abs() float64
func (receiver_struct receiver_struct_name) method_name(inputs) return_type_of_method

#############################################
Functions

Variadic functions
Accepts variable number of arguments.
Just like ** is unpacking operator in python, ... is unpacking operator in golang
#############################################
Struct:

Defining Struct:
type Vertex struct {
	X int
	Y int
}

Initialising struct
vertex_struct_var := Vertex{
		X: 1,
		Y: 2,
	}

Getting and Setting values of struct
vertex_struct_var.X 
Anonymous Struct:

Defining and initialising in the same line
person_name := struct {
	firstName, lastName string
	id int
}{
	firstName: "Apoorva"
	lastName: "Laiti"
	id: "111111"

}

Struct Embedding:
Gives Composition of types

type base struct {
    num int
}
type container struct {
    base
    str string
}
An embedding looks like a field without a name.

The fields of the embedded struct can be directly
accessed from the container's struct var.

co := container{
        base: base{
            num: 1,
        },
        str: "some name",
    }
co.num  // would give the base's num field

#############################################
Interface:
type interface_name interface{
	method1(method1_inputs) method1_returnvalue
	method2(method2_inputs) method2_returnvalue
}

var interface_variable interface_name
interface_variable = struct_which_implemented_interface_methods(fields_of_the_struct)
//Now you can call the interface methods on this interface_variable
//If the methods are implemented by the pointers of the struct,
//initialise the interface_variable with that pointer
fmt.Printf("(%v, %T)\n", interface_variable, interface_variable)
//%v gives the interface_variable, i.e., the struct variable, %T gives the struct name

empty interface
i interface{}

type assertions:
interface_variable.(struct_name)
gives the value of struct_variable


#############################################
Defer Panics Recover

Defer:
defer function_name()
// inside function_name we define what is to be deferred
// Even if a panic occurs, defer will be called

Panic:
panic("Error panic occurred")

Recover:
defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered in f", r)
        }
    }()


#############################################
Channel

ch_name := make(chan int)   // int is the type of value which the channel holds
<- is the syntax for Channel
if ch_name is on LHS, write to the channel
if ch_name is on RHS, read from the channel

close(ch_name)
Buffered channels
buff_ch_name := make(chan int,buff_szie)


#############################################
Strings

Go strings are immutable

Copy - copy(dest, src)

initialise dest before hand as copy would copy only n numbers, where n is the minimum length of 
dest and src.

os.Args - array with the command line arguments