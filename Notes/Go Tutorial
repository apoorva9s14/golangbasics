###############################################################################
GO Workspaces:
In Go, programs are kept in a directory hierarchy that is called a workspace. 
A workspace is root directory of your Go applications. 
A workspace contains three subdirectories at its root:

src – source files organized as packages.
pkg – Go package objects. Compiled objects of each module
bin – executable programs, i.e., binaries. 

When we do import "<package-name>" Go looks for these packages in $GOROOT/src or $GOPATH/src directories. 
If a precompiled package object is found, Go uses that instead. Executables link all those compiled 
objects based on the modules used in the src code.

go install - creates package objects
go build - creates executables
GOPATH - location of go workspaces.

Every go program should be part of a package.
Within a single folder, the package name will be same for the all source files which belong to that directory. 
All identifiers will be exported to other packages if the first letter of the identifier name starts with an uppercase.


1. If we define the package as package main, when we run such code, it creates
	an executable.
   Every .go file in the same folder must have the same package name.

2. Go by default is pass by value, to change it to pass by reference, use pointers
   difference between pointer receiver and value receiver is:
   value receiver - pass by value
   pointer receiver - pass by reference

   Meaning of pass by value:
   When you pass an argument to a function, a copy of argument is created and that 
   copy is passed to the function. To pass the original value, use pointers.
   This helps in saving memory as we avoid creating unnecessary copies while calling
   functions.

   Pointer - is a memory address to the variable it points to.

3. the type and value of the interface are dynamic.
   it takes the type of the underlying struct which implements this interface

4. there are no exceptions in go, only errors
   Defers happen Last in First out
   Recover is only helpful with Defers. Defer + anonymous fn + recover

5. Channels are communication channels for goroutines.
   You can write to the channels and wait on the channel to read input from the channel.
   If you read from empty channel, it's a deadlock
   Difference between channels and buffered channels:
      Channels are blocking as they only store one item, 
      Only one item can be read or write at a time.
      If you want to send a value to the channel, it is blocked till another goroutine receives this value.
      For buffered channel you have a buffer of values. Only if the buffer is full, it gets blocked, i.e., deadlock.

6. Interfaces are language constructs that define functionality

###############################################################################
Struct
Struct is a datatype in golang which structures the data
The data consists of field names and the datatypes of the fields






Exported packages should start with Caps

var var_name var_type = var_value